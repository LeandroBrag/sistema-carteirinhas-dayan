/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Classes.Carteirinha;
import Classes.Estudante;
import Controles.FuncionarioDAO;
import Controles.Tabela;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Dayan Costa
 */
public class Estudantes extends javax.swing.JFrame {

    Tabela tmEstudantes = new Tabela(null, new String[]{"Nº. Cadastro","Nome", "Inst. Ensino", "Curso", "CPF"});
    ListSelectionModel lsmEstudantes;
    String tipoCadastro;
    List<Estudante> estudantes;
    JFileChooser jfcFoto = new JFileChooser();
    String caminho;
    
    

    /**
     * Creates new form Estudantes
     */
    public Estudantes() {
        initComponents();
        criaFileChooser();

    }

    
    private void criaFileChooser() {
        jfcFoto.setFileFilter(new FileNameExtensionFilter("Image Files", "jpeg", "jpg", "png"));
        jfcFoto.setAcceptAllFileFilterUsed(false);
        jfcFoto.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfcFoto.setApproveButtonText("Selecionar");
        jfcFoto.setCurrentDirectory(new File("C:\\Users\\note\\"));
        jfcFoto.setMultiSelectionEnabled(false);
        jfcFoto.setFileHidingEnabled(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfPesquisa = new javax.swing.JTextField();
        btPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEstudantes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfCpf = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDataNascimento = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        tfInstituicaoEnsino = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfCurso = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfNumeroMatricula = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfTelefone = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        btNovo = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btFechar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btSelecionar = new javax.swing.JButton();
        lbFoto = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfDataEmissao = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        tfDataValidade = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuSobre = new javax.swing.JMenuItem();
        menuSair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estudantes");

        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        tbEstudantes.setModel(tmEstudantes);
        tbEstudantes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsmEstudantes = tbEstudantes.getSelectionModel();
        lsmEstudantes.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e){
                if(! e.getValueIsAdjusting()){
                    tbEstudantesLinhaSelecionada(tbEstudantes);
                }
            }
        });
        tbEstudantes.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbEstudantes.getColumnModel().getColumn(1).setPreferredWidth(150);
        tbEstudantes.getColumnModel().getColumn(2).setPreferredWidth(150);
        tbEstudantes.getColumnModel().getColumn(3).setPreferredWidth(120);
        tbEstudantes.getColumnModel().getColumn(4).setPreferredWidth(120);
        tbEstudantes.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tbEstudantes);

        jLabel1.setText("Nome: *");

        tfNome.setEditable(false);

        jLabel2.setText("CPF: *");

        tfCpf.setEditable(false);
        try {
            tfCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel3.setText("Dt. Nascimento: *");

        tfDataNascimento.setEditable(false);
        try {
            tfDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel6.setText("Inst. Ensino: *");

        tfInstituicaoEnsino.setEditable(false);

        jLabel4.setText("Curso: *");

        tfCurso.setEditable(false);

        jLabel5.setText("Num. Matricula: *");

        tfNumeroMatricula.setEditable(false);

        jLabel7.setText("Telefone: ");

        tfTelefone.setEditable(false);
        try {
            tfTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel8.setText("Foto: *");

        btNovo.setText("Novo");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.setEnabled(false);
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.setEnabled(false);
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btFechar.setText("Fechar");
        btFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharActionPerformed(evt);
            }
        });

        jLabel9.setText("*: Campos com preenchimento obrigatório");

        btSelecionar.setText("Selecionar...");
        btSelecionar.setEnabled(false);
        btSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarActionPerformed(evt);
            }
        });

        jLabel10.setText("Data Emissão: *");

        tfDataEmissao.setEditable(false);
        try {
            tfDataEmissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel11.setText("Data Validade: *");

        tfDataValidade.setEditable(false);
        try {
            tfDataValidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jMenu1.setText("Opções");

        menuSobre.setText("Sobre");
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        jMenu1.add(menuSobre);

        menuSair.setText("Sair");
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        jMenu1.add(menuSair);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(148, 148, 148)
                                    .addComponent(jLabel2))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                    .addGap(12, 12, 12)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))))
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(tfDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tfPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPesquisar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btFechar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfInstituicaoEnsino, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(tfNumeroMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btSelecionar)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(tfDataEmissao, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfTelefone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfDataValidade, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(lbFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(68, 68, 68)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfCpf, tfCurso});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btAlterar, btCancelar, btExcluir, btFechar, btNovo, btSalvar});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfDataEmissao, tfDataValidade});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPesquisar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfInstituicaoEnsino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNumeroMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(tfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfDataEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDataValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel7))
                        .addGap(0, 37, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSelecionar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNovo)
                    .addComponent(btSalvar)
                    .addComponent(btAlterar)
                    .addComponent(btExcluir)
                    .addComponent(btCancelar)
                    .addComponent(btFechar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        tipoCadastro = "novo";
        novoEstudante();
    }//GEN-LAST:event_btNovoActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        if (tipoCadastro.equals("novo")) {
            cadastrarEstudante();
            listarEstudantes();
        } else if (tipoCadastro.equals("alterar")) {
            modificaEstudante();
            listarEstudantes();
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        tipoCadastro = "alterar";
        alteraEstudante();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
       excluir();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        novoEstudante();
        desabilitaCampos();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Deseja sair da tela de Estudantes?", "ATENÇÃO!", JOptionPane.YES_NO_OPTION) == 0) {
            this.dispose();
        }
        novoEstudante();
        desabilitaCampos();
        tbEstudantes.getSelectionModel().clearSelection();

    }//GEN-LAST:event_btFecharActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        listarEstudantes();
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void btSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarActionPerformed
        abrirFileChooser();
    }//GEN-LAST:event_btSelecionarActionPerformed

    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Esta ação irá sair do sistema por completo, confirma esta ação?", "ATENÇÃO!", JOptionPane.YES_NO_OPTION) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_menuSairActionPerformed

    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed
        JOptionPane.showMessageDialog(null, "Sistema de Emissão de Carteirinhas v1.0 desenvolvido por: \nDayan Costa\nIury Rezende"
                + "\nLuciano Costa\nVitor Almeida");
    }//GEN-LAST:event_menuSobreActionPerformed
    public void habilitaCampos() {
        btSelecionar.setEnabled(true);
        btNovo.setEnabled(false);
        btFechar.setEnabled(false);
        btExcluir.setEnabled(false);
        btAlterar.setEnabled(false);
        btCancelar.setEnabled(true);
        btSalvar.setEnabled(true);
        tfNome.setEditable(true);
        tfDataNascimento.setEditable(true);
        tfCpf.setEditable(true);
        tfTelefone.setEditable(true);
        tfInstituicaoEnsino.setEditable(true);
        tfCurso.setEditable(true);
        tfNumeroMatricula.setEditable(true);
        tfDataEmissao.setEditable(true);
        tfDataValidade.setEditable(true);
        lbFoto.setIcon(null);
    }

    public void desabilitaCampos() {
        btSelecionar.setEnabled(false);
        btNovo.setEnabled(true);
        btFechar.setEnabled(true);
        btExcluir.setEnabled(true);
        btAlterar.setEnabled(true);
        btCancelar.setEnabled(false);
        btSalvar.setEnabled(false);
        tfNome.setEditable(false);
        tfDataNascimento.setEditable(false);
        tfCpf.setEditable(false);
        tfTelefone.setEditable(false);
        tfInstituicaoEnsino.setEditable(false);
        tfCurso.setEditable(false);
        tfNumeroMatricula.setEditable(false);
        tfDataEmissao.setEditable(false);
        tfDataValidade.setEditable(false);

    }

    public void novoEstudante() {
        btExcluir.setEnabled(false);
        btAlterar.setEnabled(false);
        btCancelar.setEnabled(true);
        habilitaCampos();
        tfNome.setText("");
        tfDataNascimento.setText("");
        tfCpf.setText("");
        tfTelefone.setText("");
        tfInstituicaoEnsino.setText("");
        tfCurso.setText("");
        tfNumeroMatricula.setText("");
    }
    /**
     * Compara as datas de validade e emissão e só deixará o cadastro prosseguir se a data de emissão for menor que a data de validade.
     * 
     * @param dataEmissao
     * @param dataValidade
     * @return 
     */
    public boolean compararDatas(String dataEmissao, String dataValidade){
        Date emissao = null;
        Date validade = null;
        
        String newDate1 = new String(dataEmissao);
        String newDate2 = new String(dataValidade);
       
        
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        
        try{
            formatoData.setLenient(false);
            emissao = formatoData.parse(dataEmissao);
            validade = formatoData.parse(dataValidade);
                    
            
            if(emissao.before(validade)){
                return true;
                
            } else {
                JOptionPane.showMessageDialog(null, "Data de Validade deverá ser maior que a Data de Emissão!");
                tfDataValidade.requestFocus();
                return false;
            } 
                        
        } catch(ParseException e){
            System.out.println(e);
            return false;
        }
    }
    
    /**
     * Verifica se a data de emissão e valida.
     * @param dataEmissao
     * @return 
     */
    public boolean validarDataEmissao(String dataEmissao){
        Date data = null;
        
        String dataTexto = new String(dataEmissao);
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        try{
            formatoData.setLenient(false);
            data = formatoData.parse(dataTexto);
            return true;
        } catch(ParseException e){
            JOptionPane.showMessageDialog(null, "Data de Emissão Inválida. Digite uma data Válida!", "Aviso", JOptionPane.WARNING_MESSAGE);
            tfDataEmissao.requestFocus();
            return false;
        }
    }
    /**
     * Verifica se a data de validade da carteirinha é valida.
     * @param dataVencimento
     * @return 
     */
    public boolean validarDataVencimento(String dataVencimento){
        Date data = null;
        
        String dataTexto = new String(dataVencimento);
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        try{
            formatoData.setLenient(false);
            data = formatoData.parse(dataTexto);
            return true;
        } catch(ParseException e){
            JOptionPane.showMessageDialog(null, "Data de Validade Inválida. Digite uma data Válida!", "Aviso", JOptionPane.WARNING_MESSAGE);
            tfDataValidade.requestFocus();
            return false;
        }
    }
    
    public boolean validarDataNascimento(String dataNascimento){
        Date data = null;
        
        String dataTexto = new String(dataNascimento);
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        try{
            formatoData.setLenient(false);
            data = formatoData.parse(dataTexto);
            return true;
        } catch(ParseException e){
            JOptionPane.showMessageDialog(null, "Data de Nascimento Inválida. Digite uma data Válida!", "Aviso", JOptionPane.WARNING_MESSAGE);
            tfDataNascimento.requestFocus();
            return false;
        }
    }
    /**
     * Verifica se o campo nome está vazio, se estiver ele não prossegue com o cadastro
     * @return 
     */
    public boolean verificaNome() {
        if (!tfNome.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Campo nome é obrigatório!");
            tfNome.requestFocus();
            return false;
        }
    }

        
    /**
     * Verifica se o campo cpf está vazio, se estiver ele não prossegue com o cadastro.
     * Se o campo for vazio ele verifica se há alguém cadastrado com aquele cpf no banco
     * 
     * @return true se não houver ninguém com o cpf cadastrado e false se houver aquele cpf cadastrado no banco de dados 
     */
    public boolean verificaCpf() {
        FuncionarioDAO dao = new FuncionarioDAO();
        if (!tfCpf.getText().trim().equals("")){
            try{
                estudantes = dao.listarEstudantesCpf("%" + tfCpf.getText().trim() + "%");
            } catch(SQLException e){
                JOptionPane.showMessageDialog(null, "Erro ao buscar estudante por CPF!");
                System.out.println(e);
            } if(estudantes.isEmpty()){
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "CPF já cadastrado no banco de dados!" );
                tfCpf.requestFocus();
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Campo CPF é obrigatório!");
            tfCpf.requestFocus();
            return false;
        }
    }
    
    /**
     * Verifica se o campo dataNascimento está vazio ou com uma data inválida, se estiver ele não prossegue com o cadastro
     * @return  true se o campo dataNascimento estiver preenchido e false se estiver vazio
     */
    public boolean verificaDataNascimento() {
        if (!tfDataNascimento.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Data inválida!");
            tfDataNascimento.requestFocus();
            return false;
        }
    }
    /**
     * Verifica se o campo data de emissão não está vazio e com uma data válida
     * @return 
     */
    public boolean verificaDataEmissao() {
        if (!tfDataEmissao.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Data inválida!");
            tfDataEmissao.requestFocus();
            return false;
        }
    }
    /**
     * Verifica se o campo data de validade não está vazio e com uma data válida
     * @return 
     */
    public boolean verificaDataValidade() {
        if (!tfDataValidade.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Data inválida!");
            tfDataValidade.requestFocus();
            return false;
        }
    }

    /**
     * Verifica se o campo instituicao está vazio, se estiver ele não prossegue com o cadastro
     * @return 
     */
    public boolean verificaInstituicao() {
        if (!tfInstituicaoEnsino.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Campo Instituição de Ensino é obrigatório!");
            tfInstituicaoEnsino.requestFocus();
            return false;
        }
    }

    /**
     * Verifica se o campo curso está vazio, se estiver ele não prossegue com o cadastro
     * @return 
     */
    public boolean verificaCurso() {
        if (!tfCurso.getText().trim().equals("")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Campo Curso é obrigatório!");
            tfCurso.requestFocus();
            return false;
        }
    }

    /**
     * Verifica se o campo matricula está vazio, se estiver ele não prossegue com o cadastro
     * Se estiver preenchido ele confere se aquela matricula já foi cadastrada para aquela instituição de ensino
     * no banco de dados
     * @return  true quando não há a matricula cadastrada na instituição de ensino e false quando há a matricula cadastrada na instituição de ensino
     */
    public boolean verificaMatricula() {
        
        if (!tfNumeroMatricula.getText().trim().equals("")) {
            FuncionarioDAO dao = new FuncionarioDAO();
            List<Estudante> estudantes1 = new ArrayList<>();
            
            try{
                estudantes = dao.listarEstudantesInstituicao("%" + tfInstituicaoEnsino + "%");
                estudantes1 = dao.listarEstudantesMatricula("%" + tfNumeroMatricula + "%");
            } catch(SQLException e){
                JOptionPane.showMessageDialog(null, "Erro ao pesquisar estudante por instituição de ensino e matricula");
                System.out.println(e);
            }
            if(estudantes.isEmpty() && estudantes1.isEmpty()){
                return true;
                
            } else{
                JOptionPane.showMessageDialog(null, "Já existe um estudante com esta Matricula desta Instituição de Ensino cadastrado no sistema!");
                return false;
                
            }
        } else  {
            JOptionPane.showMessageDialog(null, "Campo Matricula é obrigatório!");
            tfNumeroMatricula.requestFocus();
            return false;
        }
       
    }
    
   
    /**
     * Cadastra o estudante no banco de dados  se todas as condições forem verdadeiras
     */
    public void cadastrarEstudante(){
        if (verificaNome() && verificaCpf() && verificaDataNascimento() && verificaInstituicao() && verificaCurso() && validarDataNascimento(tfDataNascimento.getText().trim()) && validarDataEmissao(tfDataEmissao.getText().trim()) && validarDataVencimento(tfDataValidade.getText().trim())) {
                 try {
                        Estudante estudante = new Estudante();
                        estudante.setNome(tfNome.getText().trim());
                        estudante.setDataNascimento(tfDataNascimento.getText().trim());
                        estudante.setCpf(tfCpf.getText().trim());
                        estudante.setTelefone(tfTelefone.getText().trim());
                        estudante.setInstituicaoDeEnsino(tfInstituicaoEnsino.getText().trim());
                        estudante.setCurso(tfCurso.getText().trim());
                        estudante.setNumeroMatricula(tfNumeroMatricula.getText().trim());
                        imagem();
                        estudante.setFoto(caminho);
                        
                        Carteirinha carteirinha = new Carteirinha();
                        carteirinha.setDataEmissao(tfDataEmissao.getText().trim());
                        carteirinha.setDataValidade(tfDataValidade.getText().trim());
                        
                       if(compararDatas(tfDataEmissao.getText().trim(), tfDataValidade.getText().trim())){
                            FuncionarioDAO dao = new FuncionarioDAO();
                            dao.cadastraEstudante(estudante);
                            estudantes = dao.listarEstudantesCpf("%" + tfCpf.getText().trim() + "%");
                            carteirinha.setId_estudante(estudantes.get(0).getId());
                            dao.cadastraCarteirinha(carteirinha);
                            JOptionPane.showMessageDialog(null, estudante.getNome() + " cadastrado com sucesso!");
                            desabilitaCampos();
                       }   
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Cadastro não sucedido!");
                        System.out.println(ex);
                    } catch(NullPointerException e){
                        
                        JOptionPane.showMessageDialog(null, "Foto obrigatória!");
                    }
        } else{
            JOptionPane.showMessageDialog(null, "Não foi possível cadastrar o Estudante!");
        } 
       
        
    }
    
    /**
     * Este método irá exibir o(s) estudante(s) pesquisado(s) e encontrados no banco de dados!
     * @param List<estudantes>
     */
    private void mostrarEstudantes(List<Estudante> estudantes) {
        while (tmEstudantes.getRowCount() > 0) {
            tmEstudantes.removeRow(0);
        }
        if (estudantes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum estudante encontrado!");
        } else {
            String[] linha = new String[]{null, null, null, null, null};
            for (int i = 0; i < estudantes.size(); i++) {
                tmEstudantes.addRow(linha);
                tmEstudantes.setValueAt(estudantes.get(i).getId(), i, 0);
                tmEstudantes.setValueAt(estudantes.get(i).getNome(), i, 1);
                tmEstudantes.setValueAt(estudantes.get(i).getInstituicaoDeEnsino(), i, 2);
                tmEstudantes.setValueAt(estudantes.get(i).getCurso(), i, 3);
                tmEstudantes.setValueAt(estudantes.get(i).getCpf(), i, 4);

            }
        }
    }

    /**
     * Este método instancia um FuncionarioDAO para que seja possível realizar a consulta dos estudantes
     * cadastrados no banco de dados e assim exibir chamando o método mostrarEstudantes()
     * 
     * @throws SQLException
     * @throws Exception 
     */
    private void listarEstudantes(){
        FuncionarioDAO dao = new FuncionarioDAO();
        try {
            estudantes = dao.listarEstudantes("%" + tfPesquisa.getText().trim() + "%");  
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro na listagem de Estudantes!");
            System.out.println(ex);
        }
            mostrarEstudantes(estudantes);
            //dao = null;
    }
    /**
     * Este método seta os valores dos textField's com os dados do estudante selecionado na tabela
     * 
     * @param table 
     */
    private void tbEstudantesLinhaSelecionada(JTable table) {
        if (tbEstudantes.getSelectedRow() != -1) { //retorna -1 quando não há nenhuma linha da tabela selecionada
            tfNome.setText(estudantes.get(table.getSelectedRow()).getNome());
            tfDataNascimento.setText(estudantes.get(table.getSelectedRow()).getDataNascimento());
            tfCpf.setText(estudantes.get(table.getSelectedRow()).getCpf());
            tfTelefone.setText(estudantes.get(table.getSelectedRow()).getTelefone());
            tfInstituicaoEnsino.setText(estudantes.get(table.getSelectedRow()).getInstituicaoDeEnsino());
            tfCurso.setText(estudantes.get(table.getSelectedRow()).getCurso());
            tfNumeroMatricula.setText(estudantes.get(table.getSelectedRow()).getNumeroMatricula());
            tfDataEmissao.setText(estudantes.get(table.getSelectedRow()).getCarteirinha().getDataEmissao());
            tfDataValidade.setText(estudantes.get(table.getSelectedRow()).getCarteirinha().getDataValidade());
            caminho = estudantes.get(table.getSelectedRow()).getFoto();
            listarImagem(caminho);
        }
    }

    /**
     * Este método libera os campos disponíveis para alteração e dados de um determinado estudante.
     * 
     */
    private void alteraEstudante() {
        if (tbEstudantes.getSelectedRow() != -1) {
            habilitaCampos();
            tfDataEmissao.setEditable(false);
            tfDataValidade.setEditable(false);
            btExcluir.setEnabled(false);
            btNovo.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um estudante na tabela!");
        }
    }
    /**
     * Este método seta os valores capturados do estudante e os altera no banco de dados através do metodo
     * alteraEstudante da classe FuncionarioDAO
     */
    private void modificaEstudante(){
        if (verificaNome() && verificaDataNascimento() && verificaInstituicao() && verificaCurso()) {
            try {
                Estudante est = new Estudante();
                
                est.setNome(tfNome.getText().trim());
                est.setCpf(tfCpf.getText().trim());
                est.setTelefone(tfTelefone.getText().trim());
                est.setInstituicaoDeEnsino(tfInstituicaoEnsino.getText().trim());
                est.setCurso(tfCurso.getText().trim());
                est.setNumeroMatricula(tfNumeroMatricula.getText().trim());
                est.setDataNascimento(tfDataNascimento.getText().trim());
                imagem();
                est.setFoto(caminho);
                est.setId(estudantes.get(tbEstudantes.getSelectedRow()).getId());
                                         
                
                FuncionarioDAO dao = new FuncionarioDAO();
                dao.alteraEstudante(est);
                JOptionPane.showMessageDialog(null, est.getNome() + " atualizado com sucesso!");
                desabilitaCampos();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Atualização não sucedida!");
                System.out.println(ex);
            }

        }
    }
    /**
     * Este método exclui um determinado estudante do banco de dados, assim como sua foto da pasta do projeto
     */
    private void excluir(){
        if (JOptionPane.showConfirmDialog(null, "Deseja excluir este funcionário?", "ATENÇÃO", JOptionPane.YES_NO_OPTION) == 0) {
            if (tbEstudantes.getSelectedRow() != -1) {
                try {
                    FuncionarioDAO dao = new FuncionarioDAO();
                    dao.excluirEstudante(estudantes.get(tbEstudantes.getSelectedRow()));
                    excluirFoto();
                    JOptionPane.showMessageDialog(null, "Estudante excluido com sucesso!");
                    listarEstudantes();
                    
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao excluir!");
                    System.out.println(ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Nenhum estudante Selecionado. Selecione um Estudante da Tabela", "AVISO", 0);
            }
        }
        
    }

    private void abrirFileChooser() {
        int returnVal = jfcFoto.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            caminho = jfcFoto.getSelectedFile().getAbsolutePath();
            ImageIcon icon = new ImageIcon(caminho);
            lbFoto.setIcon(new ImageIcon(icon.getImage().getScaledInstance(lbFoto.getWidth(), lbFoto.getHeight(), Image.SCALE_DEFAULT)));
        } 
    }
     
    
    public void copiarImagem(File origem, File destino){
        try{
            FileChannel in = new FileInputStream(origem).getChannel();
            FileChannel out = new FileOutputStream(destino).getChannel();
            out.transferFrom(in, 0, in.size());
            
            in.close();
            out.close();
        } catch(FileNotFoundException e){
            
        } catch (IOException ex) {
            Logger.getLogger(Estudantes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void imagem(){
        String cpf = tfCpf.getText().trim();
        File original = new File(caminho);
        File copia = new File("C:\\Users\\note\\Documents\\NetBeansProjects\\Sistema de Carteirinhas POO\\imagens\\"+cpf+".png");
        
        try{
                if(!copia.exists()){
                copiarImagem(original, copia);
                caminho = copia.getAbsolutePath();
            } else{
               copia.delete();
               copiarImagem(original, copia);
               caminho = copia.getAbsolutePath();
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Foto obrigatória!");
        }
    }
    
    public void listarImagem(String caminho){
        ImageIcon icon = new ImageIcon(caminho);
        lbFoto.setIcon(new ImageIcon(icon.getImage().getScaledInstance(lbFoto.getWidth(), lbFoto.getHeight(), Image.SCALE_DEFAULT)));
    }
    
    public void excluirFoto(){
        caminho = estudantes.get(tbEstudantes.getSelectedRow()).getFoto();
        File foto = new File(caminho);
        foto.delete();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estudantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estudantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estudantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estudantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estudantes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btFechar;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btPesquisar;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btSelecionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbFoto;
    private javax.swing.JMenuItem menuSair;
    private javax.swing.JMenuItem menuSobre;
    private javax.swing.JTable tbEstudantes;
    private javax.swing.JFormattedTextField tfCpf;
    private javax.swing.JTextField tfCurso;
    private javax.swing.JFormattedTextField tfDataEmissao;
    private javax.swing.JFormattedTextField tfDataNascimento;
    private javax.swing.JFormattedTextField tfDataValidade;
    private javax.swing.JTextField tfInstituicaoEnsino;
    private javax.swing.JTextField tfNome;
    private javax.swing.JTextField tfNumeroMatricula;
    private javax.swing.JTextField tfPesquisa;
    private javax.swing.JFormattedTextField tfTelefone;
    // End of variables declaration//GEN-END:variables
}
